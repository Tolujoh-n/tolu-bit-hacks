Here is the summary of simple functionality i wanna achieve as I'm building a simple quiz application. 
For users that wanna host quiz: 
They can host quiz given details, entrance fee which participant pay before they enter quiz, (setting questions and option and correct answer, timer), pricepool (in STX) which will be deducted from their account before quiz is hosted and seen on frontend. 
const [gameInfo, setGameInfo] = useState({
    quizImage: "",
    quizName: "",
    quizDescription: "", // Updated state
    pricepool: 0,
    entrancefee: 0,
    Timer: 0,
    rewards: [
      { label: "60% - 69%", value: 0 },
      { label: "70% - 79%", value: 0 },
      { label: "80% - 100%", value: 0 },
    ],
  });

The Perticipants:
They Enter quiz by paying the quiz entrance fee when they click the enter quiz btn (in STX) set by the organizer.

The time is set to the organizer set time and quiz question is displayed accordingly. when they are done with the quiz if they grade (number of quiz and correct option) is within they grade that get rewards they get their rewards immediately after the quiz.

I wanna retrive the number of participants and their grade and number of correct anwers also from the smart contract:

Here are my components:
Organizer:
import React, { useState } from "react";
import axios from "axios";


const QuizForm = ({
  pricepool,
  onSubmit,
  quizTitle,
  quizDescription,
  rewards,
}) => {
  const [quiz, setQuiz] = useState([]);

  const handleAddQuiz = () => {
    setQuiz((prevQuiz) => [
      ...prevQuiz,
      {
        question: "",
        options: Array(4).fill(""),
        correctOption: null,
      },
    ]);
  };
  const handleQuestChange = (index, field, value) => {
    setQuiz((prevQuiz) =>
      prevQuiz.map((quest, i) =>
        i === index ? { ...quest, [field]: value } : quest
      )
    );
  };

  const handleOptionChange = (index, optionIndex, value) => {
    setQuiz((prevQuiz) =>
      prevQuiz.map((quest, i) =>
        i === index
          ? {
              ...quest,
              options: quest.options.map((opt, idx) =>
                idx === optionIndex ? value : opt
              ),
            }
          : quest
      )
    );
  };

  const handleCheckboxChange = (index, optionIndex) => {
    setQuiz((prevQuiz) =>
      prevQuiz.map((quest, i) =>
        i === index
          ? {
              ...quest,
              correctOption: optionIndex,
            }
          : quest
      )
    );
  };


  const handleSubmit = () => {
    console.log("Quiz Submitted:", { pricepool, quiz });
    onSubmit({ pricepool, quiz });
  };

  return (
    <div style={styles.formContainer}>
      {quiz.map((quest, index) => (
        <div key={index} style={styles.questContainer}>
          <div
            style={{
              border: "1px solid gray",
              borderRadius: "5px",
              padding: "10px",
            }}
          >
            <div className="row gy-4">
              <div className="col-md-12">
                <div className="form-group">
                  <label style={styles.label}>Question: {index + 1}</label>
                  <textarea
                    type="text"
                    className="form-control"
                    placeholder="Type your Questions"
                    value={quest.question}
                    onChange={(e) =>
                      handleQuestChange(index, "question", e.target.value)
                    }
                    style={styles.textarea}
                    required
                  />
                </div>
              </div>
              {quest.options.map((option, optionIndex) => (
                <div className="col-md-6" key={optionIndex}>
                  <div className="form-group">
                    <div className="d-flex justify-content-between align-items-center">
                      {/* Checkbox and input wrapper */}
                      <div className="d-flex align-items-center">
                        {/* Checkbox */}
                        <input
                          type="checkbox"
                          checked={quest.correctOption === optionIndex}
                          onChange={() =>
                            handleCheckboxChange(index, optionIndex)
                          }
                        />
                        {/* Input */}
                        <input
                          type="text"
                          className="form-control ml-2" // Add margin to separate checkbox and input
                          placeholder={`Option ${optionIndex + 1}`}
                          value={option}
                          onChange={(e) =>
                            handleOptionChange(
                              index,
                              optionIndex,
                              e.target.value
                            )
                          }
                          style={styles.input}
                          required
                        />
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            <button
              onClick={() =>
                generateWrongOptions(index, quest.description, quest.options[0])
              }
              id="followbtn"
            >
              AI Wrong Options
            </button>
          </div>
        </div>
      ))}
      <div className="d-flex justify-content-between align-items-center">
        <div>
          <button onClick={handleAddQuiz} id="followbtn">
            Add Question
          </button>
        </div>
        <div>
          <button onClick={handleSubmit} id="followbtn">
            Submit Quiz
          </button>
        </div>
      </div>
    </div>
  );
};

export default QuizForm;

import React, { useState } from "react";
import axios from "axios";
import QuizForm from "./organizer/QuizForm";


const AddQuizForm = () => {
  const [gameInfo, setGameInfo] = useState({
    quizImage: "",
    quizName: "",
    quizDescription: "", // Updated state
    pricepool: 0,
    entrancefee: 0,
    Timer: 0,
    rewards: [
      { label: "60% - 69%", value: 0 },
      { label: "70% - 79%", value: 0 },
      { label: "80% - 100%", value: 0 },
    ],
  });

  // Function to handle changes in quiz description
  const handleQuizDescriptionChange = (e) => {
    setGameInfo({ ...gameInfo, quizDescription: e.target.value });
  };

  // Function to handle changes in quiz title
  const handleQuizTitleChange = (e) => {
    setGameInfo({ ...gameInfo, quizName: e.target.value });
  };

  // Function to handle changes in rewards
  const handleRewardChange = (index, value) => {
    setGameInfo((prevState) => {
      const rewards = [...prevState.rewards];
      rewards[index].value = value;
      const pricepool = rewards.reduce(
        (total, reward) => total + reward.value,
        0
      );
      return { ...prevState, rewards, pricepool };
    });
  };

  const handleSubmit = (quizData) => {
    // You can send quizData to the database here
    console.log("Quiz Data Submitted:", quizData);
  };

  return (
    <div style={styles.container}>
      <h1>Quiz Information</h1>
      <div className="row gy-4">
        <div className="col-md-6">
          <div className="form-group">
            <label style={styles.label}>Quiz Title:</label>
            <input
              type="text"
              className="form-control"
              placeholder="Enter Quiz Title"
              value={gameInfo.quizName}
              onChange={(e) =>
                setGameInfo({ ...gameInfo, quizName: e.target.value })
              }
              style={styles.input}
              required
            />
          </div>
          <div className="form-group">
            <label style={styles.label}>Price Pool:</label>
            <input
              type="number"
              className="form-control"
              placeholder="Price Pool (STX)"
              value={gameInfo.pricepool}
              onChange={(e) =>
                setGameInfo({
                  ...gameInfo,
                  pricepool: parseInt(e.target.value),
                })
              }
              style={styles.input}
              required
              disabled // Disable pricepool input
            />
          </div>
          <div className="form-group">
            <label style={{ fontWeight: "bold" }} htmlFor="find">
              Quiz Visibility
            </label>
            <select id="find" className="form-select mx-2" required>
              <option selected>Public</option>
              <option>Private</option>
            </select>
          </div>
        </div>
        <div className="col-md-6">
          <div className="form-group">
            <label style={styles.label}>Quiz Image:</label>
            <input
              type="file"
              className="form-control"
              accept="image/*"
              onChange={(e) =>
                setGameInfo({ ...gameInfo, quizImage: e.target.value })
              }
              style={styles.input}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="productQuantity">Entrance Fee:</label>
            <input
              type="number"
              className="form-control"
              placeholder="Participants Entrance Fee"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="productQuantity">Timer(mintes):</label>
            <input
              type="number"
              className="form-control"
              placeholder="Set minute for quiz"
              required
            />
          </div>
        </div>

        <div className="col-md-12">
          <div className="form-group">
            <label htmlFor="rewards">Winners Rewards</label>
            <table style={styles.table}>
              <tbody>
                {gameInfo.rewards.map((reward, index) => (
                  <tr key={index} style={styles.tableRow}>
                    <td>{reward.label}</td>
                    <td>
                      <input
                        type="number"
                        value={reward.value}
                        onChange={(e) =>
                          handleRewardChange(index, parseInt(e.target.value))
                        }
                        style={styles.input}
                      />
                    </td>
                  </tr>
                ))}
                {/* <tr>
                  <td>Price Pool:</td>
                  <td>{gameInfo.pricepool}</td>
                </tr> */}
              </tbody>
            </table>
          </div>

          <div className="form-group">
            <label htmlFor="description">Quiz Description</label>
            <textarea
              type="text"
              className="form-control"
              id="description"
              placeholder="Enter Quiz Description"
              value={gameInfo.quizDescription}
              onChange={handleQuizDescriptionChange}
            />
          </div>
        </div>
      </div>

      {/* Render the QuizForm component */}
      {gameInfo.pricepool > 0 && (
        <QuizForm pricepool={gameInfo.pricepool} onSubmit={handleSubmit} />
      )}
    </div>
  );
};

export default AddQuizForm;

Here is my partipants component entring quiz seeing participants and doing the quiz:
import React, { useState, useEffect } from "react";
import logo from "../assets/address.jpg";

const Modal = ({ onClose }) => {
  const [timeLeft, setTimeLeft] = useState(600); // For testing, changed time to 10 seconds
  const [currentQuestion, setCurrentQuestion] = useState(1);
  const [answers, setAnswers] = useState({});
  const [showMessage, setShowMessage] = useState(false);

  // Define quiz questions
  const quizQuestions = [
    {
      question: "What is the powerhouse of the cell?",
      options: [
        "Golgi apparatus",
        "Nucleus",
        "Mitochondria",
        "Endoplasmic reticulum",
      ],
      correctAnswer: "Mitochondria",
    },
    {
      question:
        "Which process allows plants to convert sunlight into chemical energy?",
      options: ["Respiration", "Photosynthesis", "Osmosis", "Diffusion"],
      correctAnswer: "Photosynthesis",
    },
    
    {
      question:
        "What is the process by which cells replicate their DNA and divide into two identical daughter cells?",
      options: ["Mitosis", "Meiosis", "Fertilization", "Apoptosis"],
      correctAnswer: "Mitosis",
    },
  ];

  // Timer countdown effect
  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prevTime) => {
        if (prevTime === 0) {
          clearInterval(timer);
          setShowMessage(true); // Show message when time elapses
          return 0;
        }
        return prevTime - 1;
      });
    }, 1000);

    // Clear the interval when component unmounts or time reaches 0
    return () => clearInterval(timer);
  }, []);

  // Handle next button click
  const handleNext = () => {
    if (currentQuestion < quizQuestions.length) {
      setCurrentQuestion((prevQuestion) => prevQuestion + 1);
    }
  };

  // Handle previous button click
  const handlePrevious = () => {
    if (currentQuestion > 1) {
      setCurrentQuestion((prevQuestion) => prevQuestion - 1);
    }
  };

  // Handle option selection
  const handleOptionSelect = (selectedOption) => {
    setAnswers((prevAnswers) => ({
      ...prevAnswers,
      [currentQuestion]: selectedOption,
    }));
  };

  // Handle form submission
  const handleSubmit = () => {
    // Here you can send the answers to the database or perform any other action
    console.log("Answers:", answers);
    setShowMessage(true); // Show message when user submits
  };

  // Handle redirection to home page
  const handleRedirect = () => {
    // Perform redirection logic here
    window.location.href = "/quizInfo";
    console.log("Redirecting to home page...");
  };

  // const handleOptionClick = () => {
  //   const optionButton = document.getElementById("optionbut");
  //   optionButton.classList.toggle("active");
  // };

  return (
    <div className="modal" style={modalStyle}>
      <div className="modal-content" style={modalContentStyle}>
        {/* <span style={{ cursor: "pointer" }} className="close" onClick={onClose}>
          &times;
        </span> */}

        {showMessage ? (
          <>
            <div className="maincard">
              <div
                style={{
                  background: "#213743",
                  border: "5px solid #b1bad3",
                  // borderStyle: "dashed",
                }}
                className="card info-card revenue-card"
              >
                <div className="card-body">
                  <h6 style={{ color: "#d5dceb" }}>
                    Thanks for participating!
                  </h6>
                </div>
              </div>

              <div className="container">
                <div className="row">
                  <div className="col">
                    <div className="d-flex justify-content-between">
                      {/* option */}
                      <div className="flex-fill mr-2">
                        <button
                          onClick={handleRedirect}
                          className="btn btn-primary btn-block"
                          id="optionbut"
                        >
                          See Results
                        </button>
                      </div>
                      {/* Second word */}
                    </div>
                  </div>
                </div>
                <br />
              </div>
            </div>
          </>
        ) : (
          <>
            <div className="d-flex justify-content-between align-items-center">
              {/* First word with icon */}
              <div>
                <span style={{ color: "#b1bad3" }}>
                  Question: {currentQuestion} / {quizQuestions.length}
                </span>
              </div>
              {/* Second word */}
              <div>
                <span style={{ color: "#b1bad3" }}>
                  {" "}
                  {Math.floor(timeLeft / 60)}:
                  {timeLeft % 60 < 10 ? `0${timeLeft % 60}` : timeLeft % 60}
                </span>
              </div>
            </div>
            {currentQuestion <= quizQuestions.length && (
              <div className="maincard">
                <div
                  style={{
                    background: "#213743",
                    border: "5px solid #b1bad3",
                    borderStyle: "dashed",
                  }}
                  className="card info-card revenue-card"
                >
                  <div className="card-body">
                    <h6 style={{ color: "#d5dceb" }}>
                      {quizQuestions[currentQuestion - 1].question}
                    </h6>
                  </div>
                </div>

                <div className="container">
                  {quizQuestions[currentQuestion - 1].options.map(
                    (option, index) =>
                      index % 2 === 0 && (
                        <div key={index} className="row mb-2">
                          <div className="col-md-6">
                            <button
                              onClick={() => handleOptionSelect(option)}
                              className={`btn btn-block ${
                                answers[currentQuestion] === option
                                  ? "btn-success"
                                  : "btn-secondary"
                              }`}
                            >
                              {option}
                            </button>
                          </div>
                          <div className="col-md-6">
                            <button
                              onClick={() =>
                                handleOptionSelect(
                                  quizQuestions[currentQuestion - 1].options[
                                    index + 1
                                  ]
                                )
                              }
                              className={`btn btn-block ${
                                answers[currentQuestion] ===
                                quizQuestions[currentQuestion - 1].options[
                                  index + 1
                                ]
                                  ? "btn-success"
                                  : "btn-secondary"
                              }`}
                            >
                              {
                                quizQuestions[currentQuestion - 1].options[
                                  index + 1
                                ]
                              }
                            </button>
                          </div>
                        </div>
                      )
                  )}
                </div>

                <br />
                <div className="d-flex justify-content-between align-items-center">
                  {/* First word with icon */}
                  <div>
                    <button onClick={handlePrevious} id="followbtn">
                      Previous
                    </button>
                    <button onClick={handleNext} id="followbtn">
                      Next
                    </button>
                  </div>
                  {/* Second word */}
                  <div>
                    <button onClick={handleSubmit} id="followbtn">
                      Submit
                    </button>
                  </div>
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default Modal;

import React from "react";

const tableData = [
  {
    seria: 1,
    name: "cole gas",
    passed: 12,
    failed: 6,
    Points: 600,
    grade: "40%",
  },
  {
    seria: 2,
    name: "Favour",
    passed: 15,
    failed: 10,
    Points: 400,
    grade: "30%",
  },
 
];

const Paticipants = () => {
  return (
    <div className="col-lg-12">
      <h1 className="card-title">PARTICIPANTS</h1>
      <div style={{ overflowX: "auto" }} className="col-12">
        <table className="responsive-table">
          <thead>
            <tr className="table-header">
              <th className="col col-1">Seria</th>
              <th className="col col-2 text-center">Name</th>
              <th className="col col-3">Passed</th>
              <th className="col col-3">Failed</th>
              <th className="col col-5">Points</th>
              <th className="col col-6">Grade</th>
            </tr>
          </thead>
          <tbody>
            {tableData.map((row, index) => (
              <tr key={index} className="table-row">
                <td className="col col-1" data-label="Customer Name">
                  <div className="text-center">
                    <h5>{row.seria}</h5>
                  </div>
                </td>

                <td className="col col-2" data-label="Customer Name">
                  <div className="text-center">
                    <h5>{row.name}</h5>
                  </div>
                </td>
                <td className="col col-3" data-label="Amount">
                  <h5>{row.passed}</h5>
                </td>
                <td className="col col-3" data-label="Amount">
                  <h5>{row.failed}</h5>
                </td>

                <td className="col col-5" data-label="Job Ids">
                  <h5>{row.Points}</h5>
                </td>
                <td className="col col-6" data-label="Job Id">
                  <h5>{row.grade}</h5>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Paticipants;

import React, { useState } from "react";
import xp from "../assets/img/xp.jpg";
import useimage from "../assets/address.jpg";
import Modal from "./Modal";
import { BsCheckCircle } from "react-icons/bs";
import Quiztheory from "./Quiztheory";
import Paticipants from "./Paticipants";

const cardData = [
  {
    badgeColor: "primary",
    badgeText: "Bronze 10STX",
    range: "60% - 69%",
    items: ["Naccy buu", "sia funky", "Pinat van"],
  },
  {
    badgeColor: "success",
    badgeText: "Silver 20STX",
    range: "70% - 79%",
    items: ["Natmas", "Tolujohn", "Huun gss"],
  },
  {
    badgeColor: "warning",
    badgeText: "Gold 50STX",
    range: "80% - 100%",
    items: ["Tolujohn", "Faih jon", "Percy mat"],
  },
];

const QuizInfo = () => {
  const [isGamemodalOpen, setIsGamemodalOpen] = useState(false);

  const handleGamemodalClick = () => {
    setIsGamemodalOpen(true);
  };

  const handleCloseGamemodal = () => {
    setIsGamemodalOpen(false);
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    // claim
    handleCloseGamemodal();
  };
  return (
    <>
      <div className="col-lg-12">
        <div className="row">
          <div className="col-lg-12">
            <div
              style={{ background: "#213743" }}
              className="card info-card revenue-card d-flex align-items-stretch"
            >
              <div
                style={{ width: "100%" }}
                className="card-body d-flex align-items-center justify-content-between flex-wrap"
              >
                <div style={{ width: "50%" }} className="ps-3 flex-grow-1">
                  <h4>
                    <a href="#">Meta Quest Presence Platform quiz 2024</a>
                  </h4>
                  <div className="d-flex justify-content-between align-items-center">
                    <div>
                      {/* First tag with icon */}
                      <span className="badge bg-warning">upcoming</span>
                    </div>
                    <div className="d-flex align-items-center">
                      {/* Second tag with icon */}
                      <i className="bi bi-globe"> </i>{" "}
                      <span className="badge me-2">Public</span>
                      <span style={{ color: "#b1bad3" }}>12 April 2024</span>
                    </div>
                  </div>
                  <br />
                  <div className="d-flex justify-content-between align-items-center">
                    {/* First word with icon */}
                    <div>
                      <span style={{ color: "#b1bad3" }}>Fee: 5 STX</span>
                    </div>
                    {/* Second word */}
                    <div>
                      <span style={{ color: "#b1bad3" }}>300 participants</span>
                      <br />
                      <span style={{ color: "#b1bad3" }}>Pool: 2500 STX</span>
                    </div>
                  </div>

                  <button onClick={handleGamemodalClick} id="enterquiz">
                    Enter Quiz
                  </button>
                </div>
                <div className="ms-auto" style={{ width: "50%" }}>
                  <img
                    src={useimage}
                    style={{
                      height: "10rem",
                      width: "100%",
                      borderRadius: "5px",
                      marginLeft: "10px",
                    }}
                    alt=""
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <Quiztheory />
      <Paticipants />
      <>
        {/* Render the Gamemodal if isGamemodalOpen is true */}
        {isGamemodalOpen && (
          <Modal onClose={handleCloseGamemodal} onSubmit={handleSubmit} />
        )}
      </>
    </>
  );
};

export default QuizInfo;


Help me hard code the  clarity smartcontract to handle all this, and updates i need to make to component to make it work on testnet. (my dapp successfully connect to stacks xverse and leather wallet. so i just need to call the wallet for transaction